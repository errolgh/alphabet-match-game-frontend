{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.generateChocies = correctLetter => {\n      let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== correctLetter.id);\n      let choices = [];\n      choices.push(correctLetter);\n      let copyOfFilteredLetters = [...filteredLetters];\n\n      while (choices.length < 6) {\n        //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n\n        if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer);\n          copyOfFilteredLetters.pop(index);\n        } else {\n          //??\n          continue; //break\n          //yield\n          //continue\n          // (leave empty)\n        }\n      }\n\n      this.setState({\n        choices: choices,\n        lettersRemaining: filteredLetters\n      });\n    };\n\n    this.updateSelectedChoice = event => {\n      // only reads letter's implementation key\n      event.preventDefault();\n      this.setState({\n        selectedChoice: event.target.value\n      });\n      console.log(\"attempting to update choice...\", event.target.value);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault(); // let filteredLetters = this.state.lettersRemaining.filter(letter =>\n      //   letter.character !== this.state.currentLetter.character)\n      //createds an array without the previous currentLetter\n\n      let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)]; //generates a new currentLetter\n\n      let choices = [];\n      choices.push(nextCurrentLetter); // an array of choices with the next currentLetter\n\n      let copyOfFilteredLetters = [...this.state.lettersRemaining]; // a copy of the array so we can pull new wrongAnswer (5)\n\n      for (let i = 0; i < 5; i++) {\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n        choices.push(wrongAnswer);\n        copyOfFilteredLetters.pop(index);\n      }\n\n      console.log(\"array of 6 choices: \", choices);\n      console.log(\"lettersRemaining: \");\n      console.log(\"attempting to handle submit...\", event.target.value);\n      this.setState({//lettersRemaining\n        //numOfAsked\n        //numCorrect\n      });\n    };\n\n    this.state = {\n      lettersRemaining: alphabet_hash,\n      currentLetter: {},\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    // an array of choices (length = 6) (including the correct one is generated)\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n    this.setState({\n      currentLetter: correctLetter\n    }); // state for choices is updated on line below\n\n    this.generateChocies(correctLetter);\n  }\n\n  //     numOfAsked: this.prevState.numOfAsked+1,\n  //     numCorrect: if (previous state of currentletter === correctLetter) {numCorrect+1},\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"What sound does this letter make?\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      choices: this.state.choices,\n      lettersRemaining: this.state.lettersRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","generateChocies","correctLetter","filteredLetters","state","lettersRemaining","filter","letter","id","choices","push","copyOfFilteredLetters","length","index","Math","round","random","wrongAnswer","includes","pop","setState","updateSelectedChoice","event","preventDefault","selectedChoice","target","value","console","log","handleSubmit","nextCurrentLetter","i","currentLetter","numOfAsked","numCorrect","componentDidMount","render","generateQuestionLetter"],"mappings":"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","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\nclass GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        lettersRemaining: alphabet_hash,\n        currentLetter: {},\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    // an array of choices (length = 6) (including the correct one is generated)\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    this.setState({currentLetter: correctLetter})\n    // state for choices is updated on line below\n    this.generateChocies(correctLetter)\n  }\n\n  generateChocies = (correctLetter) => {\n    let filteredLetters = this.state.lettersRemaining.filter(letter =>\n      letter.id !== correctLetter.id)\n\n      let choices = []\n      choices.push(correctLetter)\n\n      let copyOfFilteredLetters = [...filteredLetters]\n\n      while (choices.length < 6) {\n        //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array\n        let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n        let wrongAnswer = copyOfFilteredLetters[index]\n        if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer)\n          copyOfFilteredLetters.pop(index)\n        } else {\n          //??\n          continue\n          //break\n          //yield\n          //continue\n          // (leave empty)\n        }\n      }\n      this.setState({\n        choices: choices,\n        lettersRemaining: filteredLetters\n      })\n  }\n\n  updateSelectedChoice = (event) => {\n    // only reads letter's implementation key\n    event.preventDefault()\n    this.setState({selectedChoice: event.target.value})\n    console.log(\"attempting to update choice...\", event.target.value)\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n\n    // let filteredLetters = this.state.lettersRemaining.filter(letter =>\n    //   letter.character !== this.state.currentLetter.character)\n      //createds an array without the previous currentLetter\n\n    let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    //generates a new currentLetter\n\n    let choices = []\n    choices.push(nextCurrentLetter)\n    // an array of choices with the next currentLetter\n\n    let copyOfFilteredLetters = [...this.state.lettersRemaining]\n    // a copy of the array so we can pull new wrongAnswer (5)\n\n    for (let i = 0; i < 5; i++) {\n      let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n      let wrongAnswer = copyOfFilteredLetters[index]\n      choices.push(wrongAnswer)\n      copyOfFilteredLetters.pop(index)\n    }\n\n    console.log(\"array of 6 choices: \", choices)\n    console.log(\"lettersRemaining: \", )\n\n    console.log(\"attempting to handle submit...\", event.target.value)\n    this.setState({\n      //lettersRemaining\n      //numOfAsked\n      //numCorrect\n    })\n  }\n  //     numOfAsked: this.prevState.numOfAsked+1,\n  //     numCorrect: if (previous state of currentletter === correctLetter) {numCorrect+1},\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>What sound does this letter make?</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n          choices={this.state.choices}\n          lettersRemaining={this.state.lettersRemaining}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n"]},"metadata":{},"sourceType":"module"}