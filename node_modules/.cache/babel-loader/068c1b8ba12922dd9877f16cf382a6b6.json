{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\nexport default class GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.generateChocies = correctLetter => {\n      // let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== correctLetter.id)\n      let choices = [];\n      let copyOfFilteredLetters = [...filteredLetters]; //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array:\n\n      while (choices.length < 5) {\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n\n        if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer);\n          copyOfFilteredLetters.pop(index);\n        }\n      } // adds correctLetter at a random index in the choices array\n\n\n      choices.splice(Math.round(Math.random() * copyOfFilteredLetters.length), 0, correctLetter);\n      this.setState({\n        choices: choices,\n        lettersRemaining: filteredLetters // currentLetter: correctLetter\n\n      });\n    };\n\n    this.updateSelectedChoice = event => {\n      event.preventDefault();\n      let letterObj = alphabet_hash.find(letter => {\n        return letter.implementation === event.target.value;\n      });\n      this.setState({\n        selectedChoice: letterObj\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault(); //adds 1 point to correct answers:\n\n      if (this.state.currentLetter === this.state.selectedChoice) {\n        this.setState({\n          numCorrect: this.state.numCorrect + 1\n        });\n      }\n\n      this.generateChocies(this.state.currentLetter);\n      let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n      this.setState({\n        currentLetter: nextCurrentLetter\n      });\n      this.setState({\n        numOfAsked: this.state.numOfAsked + 1,\n        selectedChoice: null\n      });\n    };\n\n    this.state = {\n      lettersRemaining: alphabet_hash,\n      currentLetter: \"\",\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n    this.setState({\n      currentLetter: correctLetter\n    });\n    this.generateChocies(correctLetter);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"What sound does this letter make?\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      choices: this.state.choices,\n      lettersRemaining: this.state.lettersRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","generateChocies","correctLetter","choices","copyOfFilteredLetters","filteredLetters","length","index","Math","round","random","wrongAnswer","includes","push","pop","splice","setState","lettersRemaining","updateSelectedChoice","event","preventDefault","letterObj","find","letter","implementation","target","value","selectedChoice","handleSubmit","state","currentLetter","numCorrect","nextCurrentLetter","numOfAsked","componentDidMount","render","generateQuestionLetter"],"mappings":"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","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\nexport default class GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        lettersRemaining: alphabet_hash,\n        currentLetter: \"\",\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    this.setState({currentLetter: correctLetter})\n    this.generateChocies(correctLetter)\n  }\n\n  generateChocies = (correctLetter) => {\n    // let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== correctLetter.id)\n    let choices = []\n    let copyOfFilteredLetters = [...filteredLetters]\n    //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array:\n    while (choices.length < 5) {\n      let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n      let wrongAnswer = copyOfFilteredLetters[index]\n      if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer)\n          copyOfFilteredLetters.pop(index)\n      }\n    }\n      // adds correctLetter at a random index in the choices array\n      choices.splice(Math.round(Math.random()*copyOfFilteredLetters.length), 0, correctLetter)\n      this.setState({\n        choices: choices,\n        lettersRemaining: filteredLetters,\n        // currentLetter: correctLetter\n      })\n  }\n\n  updateSelectedChoice = (event) => {\n    event.preventDefault()\n    let letterObj = alphabet_hash.find(letter => {\n      return letter.implementation === event.target.value\n    })\n    this.setState({selectedChoice: letterObj})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    //adds 1 point to correct answers:\n    if (this.state.currentLetter === this.state.selectedChoice) {\n      this.setState({numCorrect: this.state.numCorrect + 1})\n    }\n    this.generateChocies(this.state.currentLetter)\n\n    let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n      this.setState({currentLetter: nextCurrentLetter})\n\n    this.setState({\n      numOfAsked: this.state.numOfAsked + 1,\n      selectedChoice: null,\n    })\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>What sound does this letter make?</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n          choices={this.state.choices}\n          lettersRemaining={this.state.lettersRemaining}\n        />\n      </React.Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}