{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.updateSelectedChoice = event => {\n      event.preventDefault();\n      this.setState({\n        selectedChoice: event.target.value\n      });\n      console.log(\"attempting to update choice...\", event.target.value);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(\"attempting to handle submit...\", event.target.value); // this.setState({\n      //   lettersRemaining: (filter out previous currentLetter),\n      //   currentletter: another random letter in choices lettersRemaining,\n      //   choices: new array of choices,\n      //   selectedChoice: null,\n      //   numOfAsked: this.state.numOfAsked ++,\n      //   numCorrect: if (selectedChoice == currentLetter) {this.state.numCorrect++}\n      // })\n    };\n\n    this.state = {\n      alphabetArray: alphabet_hash,\n      lettersRemaining: alphabet_hash,\n      currentLetter: {},\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n    this.setState({\n      currentLetter: correctLetter,\n      choices: [...this.state.choices, correctLetter] // lettersRemaining: filteredLetters\n\n    });\n  } // this.state.lettersRemaining.filter(letter){\n  //     return letter.character != correctLetter.character\n  //   }\n  // 1. need to add 5 more random letters object to choices array (must be a total of 6 elements)\n  // 2. check to make sure that none of the letters === correctLetter\n  // 3. add that letter iteratively to the choices array\n  // 4. remove correctLetter from lettersRemaining (update with this.setState)\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Choose the correct sound for this letter:\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","updateSelectedChoice","event","preventDefault","setState","selectedChoice","target","value","console","log","handleSubmit","state","alphabetArray","lettersRemaining","currentLetter","choices","numOfAsked","numCorrect","componentDidMount","correctLetter","Math","round","random","length","render","generateQuestionLetter"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,GAAE;AACX;;AADW,SA+BbC,oBA/Ba,GA+BWC,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,cAAc,EAAEH,KAAK,CAACI,MAAN,CAAaC;AAA9B,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CP,KAAK,CAACI,MAAN,CAAaC,KAA3D;AACD,KAnCY;;AAAA,SAqCbG,YArCa,GAqCGR,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CP,KAAK,CAACI,MAAN,CAAaC,KAA3D,EAFwB,CAGxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAhDY;;AAET,SAAKI,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAElB,aADJ;AAEXmB,MAAAA,gBAAgB,EAAEnB,aAFP;AAGXoB,MAAAA,aAAa,EAAE,EAHJ;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKXV,MAAAA,cAAc,EAAE,IALL;AAMXW,MAAAA,UAAU,EAAE,CAND;AAOXC,MAAAA,UAAU,EAAE;AAPD,KAAb;AASH;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,QAAIC,aAAa,GAAG,KAAKR,KAAL,CAAWE,gBAAX,CAA4BO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKX,KAAL,CAAWE,gBAAX,CAA4BU,MAArD,CAA5B,CAApB;AACA,SAAKnB,QAAL,CAAc;AACZU,MAAAA,aAAa,EAAEK,aADH;AAEZJ,MAAAA,OAAO,EAAE,CAAC,GAAG,KAAKJ,KAAL,CAAWI,OAAf,EAAwBI,aAAxB,CAFG,CAGZ;;AAHY,KAAd;AAKD,GArByC,CAuB1C;AACA;AACA;AAEE;AACA;AACA;AACA;;;AAqBFK,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKb,KAAL,CAAWM,UADzB;AAEE,MAAA,UAAU,EAAE,KAAKN,KAAL,CAAWK,UAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDALF,EAME,oBAAC,cAAD;AACE,MAAA,sBAAsB,EAAE,KAAKS,sBAD/B;AAEE,MAAA,aAAa,EAAE,KAAKd,KAAL,CAAWG,aAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAUE,oBAAC,eAAD;AACE,MAAA,oBAAoB,EAAE,KAAKb,oBAD7B;AAEE,MAAA,YAAY,EAAE,KAAKS,YAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAiBD;;AArEyC;;AAwE5C,eAAeZ,aAAf","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\n\nclass GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        alphabetArray: alphabet_hash,\n        lettersRemaining: alphabet_hash,\n        currentLetter: {},\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    this.setState({\n      currentLetter: correctLetter,\n      choices: [...this.state.choices, correctLetter],\n      // lettersRemaining: filteredLetters\n    })\n  }\n\n  // this.state.lettersRemaining.filter(letter){\n  //     return letter.character != correctLetter.character\n  //   }\n\n    // 1. need to add 5 more random letters object to choices array (must be a total of 6 elements)\n    // 2. check to make sure that none of the letters === correctLetter\n    // 3. add that letter iteratively to the choices array\n    // 4. remove correctLetter from lettersRemaining (update with this.setState)\n\n  updateSelectedChoice = (event) => {\n    event.preventDefault()\n    this.setState({selectedChoice: event.target.value})\n    console.log(\"attempting to update choice...\", event.target.value)\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"attempting to handle submit...\", event.target.value)\n    // this.setState({\n    //   lettersRemaining: (filter out previous currentLetter),\n    //   currentletter: another random letter in choices lettersRemaining,\n    //   choices: new array of choices,\n    //   selectedChoice: null,\n    //   numOfAsked: this.state.numOfAsked ++,\n    //   numCorrect: if (selectedChoice == currentLetter) {this.state.numCorrect++}\n    // })\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>Choose the correct sound for this letter:</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n"]},"metadata":{},"sourceType":"module"}