{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.updateSelectedChoice = event => {\n      event.preventDefault();\n      this.setState({\n        selectedChoice: event.target.value\n      });\n      console.log(\"attempting to update choice...\", event.target.value);\n    };\n\n    this.generateChocies = () => {\n      // event.preventDefault()\n      let filteredLetters = this.state.lettersRemaining.filter(letter => this.state.currentLetter.character === {} || letter.character !== this.state.currentLetter.character);\n      let choices = [];\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let filteredLetters = this.state.lettersRemaining.filter(letter => letter.character !== this.state.currentLetter.character); //createds an array without the previous currentLetter\n\n      let nextCurrentLetter = filteredLetters[Math.round(Math.random() * filteredLetters.length)]; //generates a new currentLetter\n\n      let choices = [];\n      choices.push(nextCurrentLetter); // an array of choices with the next currentLetter\n\n      let copyOfFilteredLetters = [...filteredLetters]; // a copy of the array so we can pull new wrongAnswer (5)\n\n      for (let i = 0; i < 5; i++) {\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n        choices.push(wrongAnswer);\n        copyOfFilteredLetters.pop(index);\n      }\n\n      console.log(\"array of 6 choices: \", choices);\n      console.log(\"attempting to handle submit...\", event.target.value);\n      this.setState({});\n    };\n\n    this.state = {\n      lettersRemaining: alphabet_hash,\n      currentLetter: {},\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0,\n      submitted: false\n    };\n  }\n\n  componentDidMount() {\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n    this.setState({\n      currentLetter: correctLetter,\n      choices: [...this.state.choices, correctLetter] // lettersRemaining: filteredLetters\n\n    });\n  } // this.setState({\n  //   lettersRemaining: filteredLetters,\n  //   currentLetter: nextCurrentLetter,\n  //   choices: null,\n  // })\n  // if (!prevState.submitted) {\n  //   this.setState({\n  //     choices: new array of choices,\n  //     correctLetter:?,\n  //     selectedChoice: null,\n  //     numOfAsked: this.prevState.numOfAsked+1,\n  //     numCorrect: if (previous state of currentletter === correctLetter) {numCorrect+1},\n  //     submitted: false,\n  //   })\n  // }\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Choose the correct sound for this letter:\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer; // 1. need to add 5 more random letters object to choices array (must be a total of 6 elements)\n// 2. check to make sure that none of the letters === correctLetter\n// 3. add that letter iteratively to the choices array\n// 4. remove correctLetter from lettersRemaining (update with this.setState)","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","updateSelectedChoice","event","preventDefault","setState","selectedChoice","target","value","console","log","generateChocies","filteredLetters","state","lettersRemaining","filter","letter","currentLetter","character","choices","handleSubmit","nextCurrentLetter","Math","round","random","length","push","copyOfFilteredLetters","i","index","wrongAnswer","pop","numOfAsked","numCorrect","submitted","componentDidMount","correctLetter","render","generateQuestionLetter"],"mappings":"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","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\nclass GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        lettersRemaining: alphabet_hash,\n        currentLetter: {},\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n        submitted: false,\n      }\n  }\n\n  componentDidMount(){\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    this.setState({\n      currentLetter: correctLetter,\n      choices: [...this.state.choices, correctLetter],\n      // lettersRemaining: filteredLetters\n    })\n  }\n\n    // this.setState({\n    //   lettersRemaining: filteredLetters,\n    //   currentLetter: nextCurrentLetter,\n    //   choices: null,\n    // })\n\n    // if (!prevState.submitted) {\n    //   this.setState({\n    //     choices: new array of choices,\n    //     correctLetter:?,\n    //     selectedChoice: null,\n    //     numOfAsked: this.prevState.numOfAsked+1,\n    //     numCorrect: if (previous state of currentletter === correctLetter) {numCorrect+1},\n    //     submitted: false,\n    //   })\n    // }\n\n\n  updateSelectedChoice = (event) => {\n    event.preventDefault()\n    this.setState({selectedChoice: event.target.value})\n    console.log(\"attempting to update choice...\", event.target.value)\n  }\n\n  generateChocies = () => {\n    // event.preventDefault()\n    let filteredLetters = this.state.lettersRemaining.filter(letter =>\n      this.state.currentLetter.character === {} || letter.character !== this.state.currentLetter.character)\n\n      let choices = []\n\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n\n    let filteredLetters = this.state.lettersRemaining.filter(letter =>\n      letter.character !== this.state.currentLetter.character)\n      //createds an array without the previous currentLetter\n\n    let nextCurrentLetter = filteredLetters[Math.round(Math.random()*filteredLetters.length)]\n    //generates a new currentLetter\n\n    let choices = []\n    choices.push(nextCurrentLetter)\n    // an array of choices with the next currentLetter\n\n    let copyOfFilteredLetters = [...filteredLetters]\n    // a copy of the array so we can pull new wrongAnswer (5)\n\n    for (let i = 0; i < 5; i++) {\n      let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n      let wrongAnswer = copyOfFilteredLetters[index]\n      choices.push(wrongAnswer)\n      copyOfFilteredLetters.pop(index)\n    }\n\n    console.log(\"array of 6 choices: \", choices)\n\n    console.log(\"attempting to handle submit...\", event.target.value)\n    this.setState({\n\n    })\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>Choose the correct sound for this letter:</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n\n// 1. need to add 5 more random letters object to choices array (must be a total of 6 elements)\n// 2. check to make sure that none of the letters === correctLetter\n// 3. add that letter iteratively to the choices array\n// 4. remove correctLetter from lettersRemaining (update with this.setState)\n"]},"metadata":{},"sourceType":"module"}