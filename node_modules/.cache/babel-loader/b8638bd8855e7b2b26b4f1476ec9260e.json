{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.updateSelectedChoice = event => {\n      console.log(\"attempting to update choice...\", event.target.value);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(\"attempting to handle submit...\", event.target.value); //this function should also update state of lettersRemaining, currentLetter, \n    };\n\n    this.state = {\n      alphabetArray: alphabet_hash,\n      lettersRemaining: alphabet_hash,\n      currentLetter: {},\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    let choices = [];\n    let letter = this.state.alphabetArray[Math.round(Math.random() * this.state.alphabetArray.length)];\n    choices.push(letter);\n    this.setState({\n      currentLetter: letter,\n      choices: choices\n    });\n  } //need an array to push the correct letter into\n  //need to push 5 random letters into this array\n  //array must be exactly 6 elements in length before rendering to DOM\n  //answer must be pushed in last to splice in at a random integer (length of array)\n  //should I give each object in alphabet_hash an id?\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Choose the correct sound for this letter:\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","updateSelectedChoice","event","console","log","target","value","handleSubmit","preventDefault","state","alphabetArray","lettersRemaining","currentLetter","choices","selectedChoice","numOfAsked","numCorrect","componentDidMount","letter","Math","round","random","length","push","setState","render","generateQuestionLetter"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,GAAE;AACX;;AADW,SA8BbC,oBA9Ba,GA8BWC,KAAD,IAAW;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,KAAK,CAACG,MAAN,CAAaC,KAA3D;AACD,KAhCY;;AAAA,SAkCbC,YAlCa,GAkCGL,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACM,cAAN;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,KAAK,CAACG,MAAN,CAAaC,KAA3D,EAFwB,CAGxB;AACD,KAtCY;;AAET,SAAKG,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAEhB,aADJ;AAEXiB,MAAAA,gBAAgB,EAAEjB,aAFP;AAGXkB,MAAAA,aAAa,EAAE,EAHJ;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKXC,MAAAA,cAAc,EAAE,IALL;AAMXC,MAAAA,UAAU,EAAE,CAND;AAOXC,MAAAA,UAAU,EAAE;AAPD,KAAb;AASH;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,QAAIJ,OAAO,GAAG,EAAd;AACE,QAAIK,MAAM,GAAG,KAAKT,KAAL,CAAWC,aAAX,CAAyBS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKZ,KAAL,CAAWC,aAAX,CAAyBY,MAAlD,CAAzB,CAAb;AACAT,IAAAA,OAAO,CAACU,IAAR,CAAaL,MAAb;AACF,SAAKM,QAAL,CAAc;AACZZ,MAAAA,aAAa,EAAEM,MADH;AAEZL,MAAAA,OAAO,EAAEA;AAFG,KAAd;AAID,GAtByC,CAwB1C;AACA;AACA;AACA;AAEA;;;AAYAY,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWO,UADzB;AAEE,MAAA,UAAU,EAAE,KAAKP,KAAL,CAAWM,UAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDALF,EAME,oBAAC,cAAD;AACE,MAAA,sBAAsB,EAAE,KAAKW,sBAD/B;AAEE,MAAA,aAAa,EAAE,KAAKjB,KAAL,CAAWG,aAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAUE,oBAAC,eAAD;AACE,MAAA,oBAAoB,EAAE,KAAKX,oBAD7B;AAEE,MAAA,YAAY,EAAE,KAAKM,YAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAiBD;;AA3DyC;;AA8D5C,eAAeT,aAAf","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\n\nclass GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        alphabetArray: alphabet_hash,\n        lettersRemaining: alphabet_hash,\n        currentLetter: {},\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    let choices = []\n      let letter = this.state.alphabetArray[Math.round(Math.random()*this.state.alphabetArray.length)]\n      choices.push(letter)\n    this.setState({\n      currentLetter: letter,\n      choices: choices\n    })\n  }\n\n  //need an array to push the correct letter into\n  //need to push 5 random letters into this array\n  //array must be exactly 6 elements in length before rendering to DOM\n  //answer must be pushed in last to splice in at a random integer (length of array)\n\n  //should I give each object in alphabet_hash an id?\n\n  updateSelectedChoice = (event) => {\n    console.log(\"attempting to update choice...\", event.target.value)\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"attempting to handle submit...\", event.target.value)\n    //this function should also update state of lettersRemaining, currentLetter, \n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>Choose the correct sound for this letter:</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n"]},"metadata":{},"sourceType":"module"}