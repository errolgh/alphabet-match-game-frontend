{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.updateSelectedChoice = event => {\n      event.preventDefault();\n      this.setState({\n        selectedChoice: event.target.value\n      });\n      console.log(\"attempting to update choice...\", event.target.value);\n    };\n\n    this.generateChocies = correctLetter => {\n      let filteredLetters = this.state.lettersRemaining.filter(letter => letter.character !== correctLetter);\n      let choices = [];\n      choices.push(correctLetter);\n      let copyOfFilteredLetters = [...filteredLetters];\n\n      for (let i = 0; i < 5; i++) {\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n        choices.push(wrongAnswer);\n        copyOfFilteredLetters.pop(index);\n      }\n\n      console.log(\"attempting to generate choices... \", choices);\n      console.log(\"currentLetter is: \", correctLetter);\n      this.setState({\n        choices: choices\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      let filteredLetters = this.state.lettersRemaining.filter(letter => letter.character !== this.state.currentLetter.character); //createds an array without the previous currentLetter\n\n      let nextCurrentLetter = filteredLetters[Math.round(Math.random() * filteredLetters.length)]; //generates a new currentLetter\n\n      let choices = [];\n      choices.push(nextCurrentLetter); // an array of choices with the next currentLetter\n\n      let copyOfFilteredLetters = [...filteredLetters]; // a copy of the array so we can pull new wrongAnswer (5)\n\n      for (let i = 0; i < 5; i++) {\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n        choices.push(wrongAnswer);\n        copyOfFilteredLetters.pop(index);\n      }\n\n      console.log(\"array of 6 choices: \", choices);\n      console.log(\"attempting to handle submit...\", event.target.value);\n      this.setState({});\n    };\n\n    this.state = {\n      lettersRemaining: alphabet_hash,\n      currentLetter: {},\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    // an array of choices (length) (including the correct one is generated)\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n    this.setState({\n      currentLetter: correctLetter\n    });\n    this.generateChocies(correctLetter);\n    this.setState({\n      choices: [...this.state.choices, correctLetter]\n    });\n  }\n\n  //     numOfAsked: this.prevState.numOfAsked+1,\n  //     numCorrect: if (previous state of currentletter === correctLetter) {numCorrect+1},\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Choose the correct sound for this letter:\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer; // 1. need to add 5 more random letters object to choices array (must be a total of 6 elements)\n// 2. check to make sure that none of the letters === correctLetter\n// 3. add that letter iteratively to the choices array\n// 4. remove correctLetter from lettersRemaining (update with this.setState)","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","updateSelectedChoice","event","preventDefault","setState","selectedChoice","target","value","console","log","generateChocies","correctLetter","filteredLetters","state","lettersRemaining","filter","letter","character","choices","push","copyOfFilteredLetters","i","index","Math","round","random","length","wrongAnswer","pop","handleSubmit","currentLetter","nextCurrentLetter","numOfAsked","numCorrect","componentDidMount","render","generateQuestionLetter"],"mappings":"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","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\nclass GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        lettersRemaining: alphabet_hash,\n        currentLetter: {},\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    // an array of choices (length) (including the correct one is generated)\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    this.setState({currentLetter: correctLetter})\n    this.generateChocies(correctLetter)\n    this.setState({choices: [...this.state.choices, correctLetter]})\n  }\n\n\n\n\n  updateSelectedChoice = (event) => {\n    event.preventDefault()\n    this.setState({selectedChoice: event.target.value})\n    console.log(\"attempting to update choice...\", event.target.value)\n  }\n\n  generateChocies = (correctLetter) => {\n    let filteredLetters = this.state.lettersRemaining.filter(letter =>\n      letter.character !== correctLetter)\n\n      let choices = []\n      choices.push(correctLetter)\n\n      let copyOfFilteredLetters = [... filteredLetters]\n\n      for (let i = 0; i < 5; i++) {\n        let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n        let wrongAnswer = copyOfFilteredLetters[index]\n        choices.push(wrongAnswer)\n        copyOfFilteredLetters.pop(index)\n      }\n      console.log(\"attempting to generate choices... \", choices)\n      console.log(\"currentLetter is: \", correctLetter)\n      this.setState({choices: choices})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n\n    let filteredLetters = this.state.lettersRemaining.filter(letter =>\n      letter.character !== this.state.currentLetter.character)\n      //createds an array without the previous currentLetter\n\n    let nextCurrentLetter = filteredLetters[Math.round(Math.random()*filteredLetters.length)]\n    //generates a new currentLetter\n\n    let choices = []\n    choices.push(nextCurrentLetter)\n    // an array of choices with the next currentLetter\n\n    let copyOfFilteredLetters = [...filteredLetters]\n    // a copy of the array so we can pull new wrongAnswer (5)\n\n    for (let i = 0; i < 5; i++) {\n      let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n      let wrongAnswer = copyOfFilteredLetters[index]\n      choices.push(wrongAnswer)\n      copyOfFilteredLetters.pop(index)\n    }\n\n    console.log(\"array of 6 choices: \", choices)\n\n    console.log(\"attempting to handle submit...\", event.target.value)\n    this.setState({\n\n    })\n  }\n  //     numOfAsked: this.prevState.numOfAsked+1,\n  //     numCorrect: if (previous state of currentletter === correctLetter) {numCorrect+1},\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>Choose the correct sound for this letter:</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n\n// 1. need to add 5 more random letters object to choices array (must be a total of 6 elements)\n// 2. check to make sure that none of the letters === correctLetter\n// 3. add that letter iteratively to the choices array\n// 4. remove correctLetter from lettersRemaining (update with this.setState)\n"]},"metadata":{},"sourceType":"module"}