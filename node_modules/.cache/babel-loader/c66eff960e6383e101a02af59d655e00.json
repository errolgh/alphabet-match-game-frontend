{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\nexport default class GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.generateChocies = () => {\n      let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n      let choices = [];\n      let copyOfFilteredLetters = [...this.state.lettersRemaining];\n      this.setState({\n        currentLetter: correctLetter\n      });\n\n      while (choices.length < 5) {\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n\n        if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer);\n          copyOfFilteredLetters.pop(index);\n        }\n      }\n\n      let randomInt = Math.round(Math.random() * 5);\n      choices.splice(randomInt, 0, correctLetter);\n      this.setState({\n        choices: choices\n      });\n    };\n\n    this.updateSelectedChoice = event => {\n      event.preventDefault();\n      let letterObj = alphabet_hash.find(letter => {\n        return letter.implementation === event.target.value;\n      });\n      this.setState({\n        selectedChoice: letterObj\n      });\n    };\n\n    this.filterChoices = lastLetter => {\n      console.log(\"filterChoices: \", lastLetter);\n      let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== lastLetter.id);\n      this.setState({\n        lettersRemaining: filteredLetters\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault(); //adds 1 point to correct answers:\n\n      if (this.state.currentLetter === this.state.selectedChoice) {\n        this.setState({\n          numCorrect: this.state.numCorrect + 1\n        });\n      }\n\n      this.filterChoices(this.state.currentLetter); // let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n      //   this.setState({currentLetter: nextCurrentLetter})\n\n      this.setState({\n        numOfAsked: this.state.numOfAsked + 1,\n        selectedChoice: null,\n        choices: []\n      });\n      this.generateChocies();\n    };\n\n    this.state = {\n      lettersRemaining: alphabet_hash,\n      currentLetter: \"\",\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    this.generateChocies();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"What sound does this letter make?\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      choices: this.state.choices,\n      lettersRemaining: this.state.lettersRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","generateChocies","correctLetter","state","lettersRemaining","Math","round","random","length","choices","copyOfFilteredLetters","setState","currentLetter","index","wrongAnswer","includes","push","pop","randomInt","splice","updateSelectedChoice","event","preventDefault","letterObj","find","letter","implementation","target","value","selectedChoice","filterChoices","lastLetter","console","log","filteredLetters","filter","id","handleSubmit","numCorrect","numOfAsked","componentDidMount","render","generateQuestionLetter"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,eAAe,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AACzDC,EAAAA,WAAW,GAAE;AACX;;AADW,SAgBbC,eAhBa,GAgBK,MAAM;AACtB,UAAIC,aAAa,GAAG,KAAKC,KAAL,CAAWC,gBAAX,CAA4BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKJ,KAAL,CAAWC,gBAAX,CAA4BI,MAArD,CAA5B,CAApB;AAEA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,qBAAqB,GAAG,CAAC,GAAG,KAAKP,KAAL,CAAWC,gBAAf,CAA5B;AACA,WAAKO,QAAL,CAAc;AAACC,QAAAA,aAAa,EAAEV;AAAhB,OAAd;;AAEA,aAAOO,OAAO,CAACD,MAAR,GAAiB,CAAxB,EAA2B;AACzB,YAAIK,KAAK,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcG,qBAAqB,CAACF,MAA/C,CAAZ;AACA,YAAIM,WAAW,GAAGJ,qBAAqB,CAACG,KAAD,CAAvC;;AACA,YAAI,CAACJ,OAAO,CAACM,QAAR,CAAiBD,WAAjB,CAAL,EAAoC;AAChCL,UAAAA,OAAO,CAACO,IAAR,CAAaF,WAAb;AACAJ,UAAAA,qBAAqB,CAACO,GAAtB,CAA0BJ,KAA1B;AACH;AACF;;AACC,UAAIK,SAAS,GAAGb,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAhB;AACAE,MAAAA,OAAO,CAACU,MAAR,CAAeD,SAAf,EAA0B,CAA1B,EAA6BhB,aAA7B;AACA,WAAKS,QAAL,CAAc;AAACF,QAAAA,OAAO,EAAEA;AAAV,OAAd;AACH,KAlCY;;AAAA,SAoCbW,oBApCa,GAoCWC,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAIC,SAAS,GAAG7B,aAAa,CAAC8B,IAAd,CAAmBC,MAAM,IAAI;AAC3C,eAAOA,MAAM,CAACC,cAAP,KAA0BL,KAAK,CAACM,MAAN,CAAaC,KAA9C;AACD,OAFe,CAAhB;AAGA,WAAKjB,QAAL,CAAc;AAACkB,QAAAA,cAAc,EAAEN;AAAjB,OAAd;AACD,KA1CY;;AAAA,SA4CbO,aA5Ca,GA4CIC,UAAD,IAAgB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BF,UAA9B;AACA,UAAIG,eAAe,GAAG,KAAK/B,KAAL,CAAWC,gBAAX,CAA4B+B,MAA5B,CAAmCV,MAAM,IAAIA,MAAM,CAACW,EAAP,KAAcL,UAAU,CAACK,EAAtE,CAAtB;AACA,WAAKzB,QAAL,CAAc;AACZP,QAAAA,gBAAgB,EAAE8B;AADN,OAAd;AAGD,KAlDY;;AAAA,SAoDbG,YApDa,GAoDGhB,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN,GADwB,CAExB;;AACA,UAAI,KAAKnB,KAAL,CAAWS,aAAX,KAA6B,KAAKT,KAAL,CAAW0B,cAA5C,EAA4D;AAC1D,aAAKlB,QAAL,CAAc;AAAC2B,UAAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWmC,UAAX,GAAwB;AAArC,SAAd;AACD;;AAED,WAAKR,aAAL,CAAmB,KAAK3B,KAAL,CAAWS,aAA9B,EAPwB,CASxB;AACA;;AAEA,WAAKD,QAAL,CAAc;AACZ4B,QAAAA,UAAU,EAAE,KAAKpC,KAAL,CAAWoC,UAAX,GAAwB,CADxB;AAEZV,QAAAA,cAAc,EAAE,IAFJ;AAGZpB,QAAAA,OAAO,EAAE;AAHG,OAAd;AAKA,WAAKR,eAAL;AACD,KAtEY;;AAET,SAAKE,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAEV,aADP;AAEXkB,MAAAA,aAAa,EAAE,EAFJ;AAGXH,MAAAA,OAAO,EAAE,EAHE;AAIXoB,MAAAA,cAAc,EAAE,IAJL;AAKXU,MAAAA,UAAU,EAAE,CALD;AAMXD,MAAAA,UAAU,EAAE;AAND,KAAb;AAQH;;AAEDE,EAAAA,iBAAiB,GAAE;AACjB,SAAKvC,eAAL;AACD;;AA0DDwC,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKtC,KAAL,CAAWmC,UADzB;AAEE,MAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWoC,UAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CALF,EAME,oBAAC,cAAD;AACE,MAAA,sBAAsB,EAAE,KAAKG,sBAD/B;AAEE,MAAA,aAAa,EAAE,KAAKvC,KAAL,CAAWS,aAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAUE,oBAAC,eAAD;AACE,MAAA,oBAAoB,EAAE,KAAKQ,oBAD7B;AAEE,MAAA,YAAY,EAAE,KAAKiB,YAFrB;AAGE,MAAA,OAAO,EAAE,KAAKlC,KAAL,CAAWM,OAHtB;AAIE,MAAA,gBAAgB,EAAE,KAAKN,KAAL,CAAWC,gBAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAmBD;;AA7FwD","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\nexport default class GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        lettersRemaining: alphabet_hash,\n        currentLetter: \"\",\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    this.generateChocies()\n  }\n\n  generateChocies = () => {\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n\n    let choices = []\n    let copyOfFilteredLetters = [...this.state.lettersRemaining]\n    this.setState({currentLetter: correctLetter})\n\n    while (choices.length < 5) {\n      let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n      let wrongAnswer = copyOfFilteredLetters[index]\n      if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer)\n          copyOfFilteredLetters.pop(index)\n      }\n    }\n      let randomInt = Math.round(Math.random()*5)\n      choices.splice(randomInt, 0, correctLetter)\n      this.setState({choices: choices})\n  }\n\n  updateSelectedChoice = (event) => {\n    event.preventDefault()\n    let letterObj = alphabet_hash.find(letter => {\n      return letter.implementation === event.target.value\n    })\n    this.setState({selectedChoice: letterObj})\n  }\n\n  filterChoices = (lastLetter) => {\n    console.log(\"filterChoices: \",lastLetter)\n    let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== lastLetter.id)\n    this.setState({\n      lettersRemaining: filteredLetters\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    //adds 1 point to correct answers:\n    if (this.state.currentLetter === this.state.selectedChoice) {\n      this.setState({numCorrect: this.state.numCorrect + 1})\n    }\n    \n    this.filterChoices(this.state.currentLetter)\n\n    // let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    //   this.setState({currentLetter: nextCurrentLetter})\n\n    this.setState({\n      numOfAsked: this.state.numOfAsked + 1,\n      selectedChoice: null,\n      choices: [],\n    })\n    this.generateChocies()\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>What sound does this letter make?</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n          choices={this.state.choices}\n          lettersRemaining={this.state.lettersRemaining}\n        />\n      </React.Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}