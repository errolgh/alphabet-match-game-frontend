{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.generateChoices = () => {} // make a copy of the\n    //must contain this.state.currentLetter (find a way to update state and use it to add it to the array that should be exactly 6 elements long)\n    // removeBot = (bot) => {\n    //     let copyOfCurrentBots = [...this.state.yourCurrentBotArmy].filter(botObj => {\n    //       return botObj.id != bot.id\n    //     })\n    //   this.setState({yourCurrentBotArmy: copyOfCurrentBots})\n    // }\n    ;\n\n    this.generateQuestionLetter = () => {\n      let randomLetterObj = this.state.alphabetArray[Math.round(Math.random() * this.state.alphabetArray.length)];\n      let randomLetter = randomLetterObj.character; //how to update this.state.currentLetter to randomLetterObj\n\n      return randomLetter;\n    };\n\n    this.state = {\n      alphabetArray: alphabet_hash,\n      currentLetter: \"\",\n      choices: [],\n      numOfAsked: 0,\n      numCorrect: 0,\n      lettersRemaining: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      lettersRemaining: [...alphabet_hash]\n    });\n  } //we need to update current letter once the question is mounted\n  // filterSeenLetters = () => { //or perhas just a function that will remove the elements that have been seen already... less computation\n  //   //find return values of iterators and find the best one to filter with, then you can use the generateQuestionLetter() to only return letters that do not exist in this array\n  //\n  //   //make a copy of the array and pop off until array.length = 0... LESS COMPUTATIONALLY EXPENSIVE\n  // }\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Choose the correct sound for this letter:\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      updateRemainingLetters: this.updateRemainingLetters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","generateChoices","generateQuestionLetter","randomLetterObj","state","alphabetArray","Math","round","random","length","randomLetter","character","currentLetter","choices","numOfAsked","numCorrect","lettersRemaining","componentDidMount","setState","render","updateRemainingLetters"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,GAAE;AACX;;AADW,SAuBbC,eAvBa,GAuBK,MAAM,CAGvB,CAHiB,CAChB;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AAhCa;;AAAA,SAiCbC,sBAjCa,GAiCY,MAAM;AAC7B,UAAIC,eAAe,GAAG,KAAKC,KAAL,CAAWC,aAAX,CAAyBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKJ,KAAL,CAAWC,aAAX,CAAyBI,MAAlD,CAAzB,CAAtB;AACA,UAAIC,YAAY,GAAGP,eAAe,CAACQ,SAAnC,CAF6B,CAG7B;;AACE,aAAOD,YAAP;AACH,KAtCY;;AAET,SAAKN,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAEX,aADJ;AAEXkB,MAAAA,aAAa,EAAE,EAFJ;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXC,MAAAA,UAAU,EAAE,CAJD;AAKXC,MAAAA,UAAU,EAAE,CALD;AAMXC,MAAAA,gBAAgB,EAAE;AANP,KAAb;AAQH;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,QAAL,CAAc;AACZF,MAAAA,gBAAgB,EAAE,CAAC,GAAGtB,aAAJ;AADN,KAAd;AAGD,GAjByC,CAkB1C;AACA;AACA;AACA;AACA;AACA;;;AAkBAyB,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKf,KAAL,CAAWW,UADzB;AAEE,MAAA,UAAU,EAAE,KAAKX,KAAL,CAAWU,UAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDALF,EAME,oBAAC,cAAD;AACE,MAAA,sBAAsB,EAAE,KAAKZ,sBAD/B;AAEE,MAAA,sBAAsB,EAAE,KAAKkB,sBAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAUE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAcD;;AAxDyC;;AA2D5C,eAAetB,aAAf","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\n\nclass GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        alphabetArray: alphabet_hash,\n        currentLetter: \"\",\n        choices: [],\n        numOfAsked: 0,\n        numCorrect: 0,\n        lettersRemaining: [],\n      }\n  }\n\n  componentDidMount(){\n    this.setState({\n      lettersRemaining: [...alphabet_hash],\n    })\n  }\n  //we need to update current letter once the question is mounted\n  // filterSeenLetters = () => { //or perhas just a function that will remove the elements that have been seen already... less computation\n  //   //find return values of iterators and find the best one to filter with, then you can use the generateQuestionLetter() to only return letters that do not exist in this array\n  //\n  //   //make a copy of the array and pop off until array.length = 0... LESS COMPUTATIONALLY EXPENSIVE\n  // }\n  generateChoices = () => {\n    // make a copy of the\n    //must contain this.state.currentLetter (find a way to update state and use it to add it to the array that should be exactly 6 elements long)\n  }\n  // removeBot = (bot) => {\n  //     let copyOfCurrentBots = [...this.state.yourCurrentBotArmy].filter(botObj => {\n  //       return botObj.id != bot.id\n  //     })\n  //   this.setState({yourCurrentBotArmy: copyOfCurrentBots})\n  // }\n  generateQuestionLetter = () => {\n    let randomLetterObj = this.state.alphabetArray[Math.round(Math.random()*this.state.alphabetArray.length)]\n    let randomLetter = randomLetterObj.character\n    //how to update this.state.currentLetter to randomLetterObj\n      return randomLetter\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>Choose the correct sound for this letter:</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          updateRemainingLetters={this.updateRemainingLetters}\n        />\n        <ChoiceContainer/>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n"]},"metadata":{},"sourceType":"module"}