{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      alphabetArray: alphabet_hash,\n      currentLetter: \"\",\n      choices: [],\n      numOfAsked: 0,\n      numCorrect: 0,\n      lettersRemaining: []\n    };\n\n    this.generateChoices = () => {// make a copy of the\n      //must contain this.state.currentLetter (find a way to update state and use it to add it to the array that should be exactly 6 elements long)\n    };\n\n    this.generateQuestionLetter = () => {\n      let randomLetter = this.state.alphabetArray[Math.round(Math.random() * this.state.alphabetArray.length)].character;\n      return randomLetter;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      lettersRemaining: [...alphabet_hash]\n    });\n  } //we need to update current letter once the question is mounted\n  // filterSeenLetters = () => { //or perhas just a function that will remove the elements that have been seen already... less computation\n  //   //find return values of iterators and find the best one to filter with, then you can use the generateQuestionLetter() to only return letters that do not exist in this array\n  //\n  //   //make a copy of the array and pop off until array.length = 0... LESS COMPUTATIONALLY EXPENSIVE\n  // }\n\n\n  render() {\n    function testCallBack() {\n      console.log(this.state.lettersRemaining);\n    }\n\n    testCallBack();\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Choose the correct sound for this letter:\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","state","alphabetArray","currentLetter","choices","numOfAsked","numCorrect","lettersRemaining","generateChoices","generateQuestionLetter","randomLetter","Math","round","random","length","character","componentDidMount","setState","render","testCallBack","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAE1CC,KAF0C,GAElC;AACNC,MAAAA,aAAa,EAAEP,aADT;AAENQ,MAAAA,aAAa,EAAE,EAFT;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,UAAU,EAAE,CAJN;AAKNC,MAAAA,UAAU,EAAE,CALN;AAMNC,MAAAA,gBAAgB,EAAE;AANZ,KAFkC;;AAAA,SA2B1CC,eA3B0C,GA2BxB,MAAM,CACtB;AACA;AACD,KA9ByC;;AAAA,SAgC1CC,sBAhC0C,GAgCjB,MAAM;AAC7B,UAAIC,YAAY,GAAG,KAAKT,KAAL,CAAWC,aAAX,CAAyBS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKZ,KAAL,CAAWC,aAAX,CAAyBY,MAAlD,CAAzB,EAAoFC,SAAvG;AACA,aAAOL,YAAP;AACD,KAnCyC;AAAA;;AAW1CM,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,QAAL,CAAc;AACZV,MAAAA,gBAAgB,EAAE,CAAC,GAAGZ,aAAJ;AADN,KAAd;AAGD,GAfyC,CAmB1C;AAEA;AACA;AACA;AACA;AACA;;;AAaAuB,EAAAA,MAAM,GAAE;AACN,aAASC,YAAT,GAAuB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CACE,KAAKpB,KAAL,CAAWM,gBADb;AAGD;;AACKY,IAAAA,YAAY;AAElB,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKlB,KAAL,CAAWK,UADzB;AAEE,MAAA,UAAU,EAAE,KAAKL,KAAL,CAAWI,UAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDALF,EAME,oBAAC,cAAD;AACE,MAAA,sBAAsB,EAAE,KAAKI,sBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EASE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CADF;AAaD;;AA3DyC;;AA8D5C,eAAeV,aAAf","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\n\nclass GameContainer extends React.Component {\n\n  state = {\n    alphabetArray: alphabet_hash,\n    currentLetter: \"\",\n    choices: [],\n    numOfAsked: 0,\n    numCorrect: 0,\n    lettersRemaining: [],\n  }\n\n  componentDidMount(){\n    this.setState({\n      lettersRemaining: [...alphabet_hash],\n    })\n  }\n\n\n\n  //we need to update current letter once the question is mounted\n\n  // filterSeenLetters = () => { //or perhas just a function that will remove the elements that have been seen already... less computation\n  //   //find return values of iterators and find the best one to filter with, then you can use the generateQuestionLetter() to only return letters that do not exist in this array\n  //\n  //   //make a copy of the array and pop off until array.length = 0... LESS COMPUTATIONALLY EXPENSIVE\n  // }\n\n  generateChoices = () => {\n    // make a copy of the\n    //must contain this.state.currentLetter (find a way to update state and use it to add it to the array that should be exactly 6 elements long)\n  }\n\n  generateQuestionLetter = () => {\n    let randomLetter = this.state.alphabetArray[Math.round(Math.random()*this.state.alphabetArray.length)].character\n    return randomLetter\n  }\n\n\n  render(){\n    function testCallBack(){\n      console.log(\n        this.state.lettersRemaining\n      )\n    }\n          testCallBack()\n\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>Choose the correct sound for this letter:</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n        />\n        <ChoiceContainer/>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n"]},"metadata":{},"sourceType":"module"}