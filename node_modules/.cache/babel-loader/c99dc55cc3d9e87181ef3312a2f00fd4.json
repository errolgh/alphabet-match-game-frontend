{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\nexport default class GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.generateChocies = () => {\n      let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n      this.setState({\n        currentLetter: correctLetter\n      });\n      let choices = [];\n      let copyOfFilteredLetters = [...this.state.lettersRemaining]; //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array:\n\n      while (choices.length < 5) {\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n\n        if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer);\n          copyOfFilteredLetters.pop(index);\n        }\n      } // adds correctLetter at a random index in the choices array\n\n\n      let randomInt = Math.round(Math.random() * 5);\n      console.log();\n      choices.splice(randomInt, 0, correctLetter);\n      this.setState({\n        choices: choices\n      });\n    };\n\n    this.updateSelectedChoice = event => {\n      event.preventDefault();\n      let letterObj = alphabet_hash.find(letter => {\n        return letter.implementation === event.target.value;\n      });\n      this.setState({\n        selectedChoice: letterObj\n      });\n    };\n\n    this.filterChoices = lastLetter => {\n      console.log(\"filterChoices: \", lastLetter);\n      let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== lastLetter.id);\n      this.setState({\n        lettersRemaining: filteredLetters\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault(); //adds 1 point to correct answers:\n\n      if (this.state.currentLetter === this.state.selectedChoice) {\n        this.setState({\n          numCorrect: this.state.numCorrect + 1\n        });\n      }\n\n      this.filterChoices(this.state.currentLetter);\n      this.generateChocies(); // let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n      //   this.setState({currentLetter: nextCurrentLetter})\n\n      this.setState({\n        numOfAsked: this.state.numOfAsked + 1,\n        selectedChoice: null\n      });\n    };\n\n    this.state = {\n      lettersRemaining: alphabet_hash,\n      currentLetter: \"\",\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    this.generateChocies();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"What sound does this letter make?\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      choices: this.state.choices,\n      lettersRemaining: this.state.lettersRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","generateChocies","correctLetter","state","lettersRemaining","Math","round","random","length","setState","currentLetter","choices","copyOfFilteredLetters","index","wrongAnswer","includes","push","pop","randomInt","console","log","splice","updateSelectedChoice","event","preventDefault","letterObj","find","letter","implementation","target","value","selectedChoice","filterChoices","lastLetter","filteredLetters","filter","id","handleSubmit","numCorrect","numOfAsked","componentDidMount","render","generateQuestionLetter"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,eAAe,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA4C;AACzDC,EAAAA,WAAW,GAAE;AACX;;AADW,SAgBbC,eAhBa,GAgBK,MAAM;AACtB,UAAIC,aAAa,GAAG,KAAKC,KAAL,CAAWC,gBAAX,CAA4BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKJ,KAAL,CAAWC,gBAAX,CAA4BI,MAArD,CAA5B,CAApB;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,aAAa,EAAER;AAAhB,OAAd;AAEA,UAAIS,OAAO,GAAG,EAAd;AACA,UAAIC,qBAAqB,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWC,gBAAf,CAA5B,CALsB,CAMtB;;AACA,aAAOO,OAAO,CAACH,MAAR,GAAiB,CAAxB,EAA2B;AACzB,YAAIK,KAAK,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcK,qBAAqB,CAACJ,MAA/C,CAAZ;AACA,YAAIM,WAAW,GAAGF,qBAAqB,CAACC,KAAD,CAAvC;;AACA,YAAI,CAACF,OAAO,CAACI,QAAR,CAAiBD,WAAjB,CAAL,EAAoC;AAChCH,UAAAA,OAAO,CAACK,IAAR,CAAaF,WAAb;AACAF,UAAAA,qBAAqB,CAACK,GAAtB,CAA0BJ,KAA1B;AACH;AACF,OAdqB,CAkBpB;;;AACA,UAAIK,SAAS,GAAGb,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAhB;AACAY,MAAAA,OAAO,CAACC,GAAR;AACAT,MAAAA,OAAO,CAACU,MAAR,CAAeH,SAAf,EAA0B,CAA1B,EAA6BhB,aAA7B;AACA,WAAKO,QAAL,CAAc;AACZE,QAAAA,OAAO,EAAEA;AADG,OAAd;AAGH,KAzCY;;AAAA,SA2CbW,oBA3Ca,GA2CWC,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAIC,SAAS,GAAG/B,aAAa,CAACgC,IAAd,CAAmBC,MAAM,IAAI;AAC3C,eAAOA,MAAM,CAACC,cAAP,KAA0BL,KAAK,CAACM,MAAN,CAAaC,KAA9C;AACD,OAFe,CAAhB;AAGA,WAAKrB,QAAL,CAAc;AAACsB,QAAAA,cAAc,EAAEN;AAAjB,OAAd;AACD,KAjDY;;AAAA,SAmDbO,aAnDa,GAmDIC,UAAD,IAAgB;AAC9Bd,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8Ba,UAA9B;AACA,UAAIC,eAAe,GAAG,KAAK/B,KAAL,CAAWC,gBAAX,CAA4B+B,MAA5B,CAAmCR,MAAM,IAAIA,MAAM,CAACS,EAAP,KAAcH,UAAU,CAACG,EAAtE,CAAtB;AACA,WAAK3B,QAAL,CAAc;AACZL,QAAAA,gBAAgB,EAAE8B;AADN,OAAd;AAGD,KAzDY;;AAAA,SA2DbG,YA3Da,GA2DGd,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN,GADwB,CAExB;;AACA,UAAI,KAAKrB,KAAL,CAAWO,aAAX,KAA6B,KAAKP,KAAL,CAAW4B,cAA5C,EAA4D;AAC1D,aAAKtB,QAAL,CAAc;AAAC6B,UAAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWmC,UAAX,GAAwB;AAArC,SAAd;AACD;;AACD,WAAKN,aAAL,CAAmB,KAAK7B,KAAL,CAAWO,aAA9B;AACA,WAAKT,eAAL,GAPwB,CASxB;AACA;;AAEA,WAAKQ,QAAL,CAAc;AACZ8B,QAAAA,UAAU,EAAE,KAAKpC,KAAL,CAAWoC,UAAX,GAAwB,CADxB;AAEZR,QAAAA,cAAc,EAAE;AAFJ,OAAd;AAID,KA3EY;;AAET,SAAK5B,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAEV,aADP;AAEXgB,MAAAA,aAAa,EAAE,EAFJ;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXoB,MAAAA,cAAc,EAAE,IAJL;AAKXQ,MAAAA,UAAU,EAAE,CALD;AAMXD,MAAAA,UAAU,EAAE;AAND,KAAb;AAQH;;AAEDE,EAAAA,iBAAiB,GAAE;AACjB,SAAKvC,eAAL;AACD;;AA+DDwC,EAAAA,MAAM,GAAE;AACN,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKtC,KAAL,CAAWmC,UADzB;AAEE,MAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWoC,UAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CALF,EAME,oBAAC,cAAD;AACE,MAAA,sBAAsB,EAAE,KAAKG,sBAD/B;AAEE,MAAA,aAAa,EAAE,KAAKvC,KAAL,CAAWO,aAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAUE,oBAAC,eAAD;AACE,MAAA,oBAAoB,EAAE,KAAKY,oBAD7B;AAEE,MAAA,YAAY,EAAE,KAAKe,YAFrB;AAGE,MAAA,OAAO,EAAE,KAAKlC,KAAL,CAAWQ,OAHtB;AAIE,MAAA,gBAAgB,EAAE,KAAKR,KAAL,CAAWC,gBAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAmBD;;AAlGwD","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\nexport default class GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        lettersRemaining: alphabet_hash,\n        currentLetter: \"\",\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    this.generateChocies()\n  }\n\n  generateChocies = () => {\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    this.setState({currentLetter: correctLetter})\n\n    let choices = []\n    let copyOfFilteredLetters = [...this.state.lettersRemaining]\n    //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array:\n    while (choices.length < 5) {\n      let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n      let wrongAnswer = copyOfFilteredLetters[index]\n      if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer)\n          copyOfFilteredLetters.pop(index)\n      }\n    }\n\n\n\n      // adds correctLetter at a random index in the choices array\n      let randomInt = Math.round(Math.random()*5)\n      console.log()\n      choices.splice(randomInt, 0, correctLetter)\n      this.setState({\n        choices: choices\n      })\n  }\n\n  updateSelectedChoice = (event) => {\n    event.preventDefault()\n    let letterObj = alphabet_hash.find(letter => {\n      return letter.implementation === event.target.value\n    })\n    this.setState({selectedChoice: letterObj})\n  }\n\n  filterChoices = (lastLetter) => {\n    console.log(\"filterChoices: \",lastLetter)\n    let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== lastLetter.id)\n    this.setState({\n      lettersRemaining: filteredLetters\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    //adds 1 point to correct answers:\n    if (this.state.currentLetter === this.state.selectedChoice) {\n      this.setState({numCorrect: this.state.numCorrect + 1})\n    }\n    this.filterChoices(this.state.currentLetter)\n    this.generateChocies()\n\n    // let nextCurrentLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    //   this.setState({currentLetter: nextCurrentLetter})\n\n    this.setState({\n      numOfAsked: this.state.numOfAsked + 1,\n      selectedChoice: null,\n    })\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>What sound does this letter make?</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n          choices={this.state.choices}\n          lettersRemaining={this.state.lettersRemaining}\n        />\n      </React.Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}