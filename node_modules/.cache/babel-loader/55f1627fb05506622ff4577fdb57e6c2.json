{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js\";\nimport React from 'react';\nimport alphabet_hash from './alphabet_hash';\nimport QuestionLetter from './QuestionLetter';\nimport ScoreTracker from './ScoreTracker';\nimport ChoiceContainer from './ChoiceContainer';\n\nclass GameContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.generateChocies = correctLetter => {\n      if (this.state.currentLetter) {\n        let nextLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n        this.setState({\n          currentLetter: nextLetter\n        });\n        this.setState({\n          currentLetter: nextLetter\n        });\n      }\n\n      let filteredLetters = this.state.lettersRemaining.filter(letter => letter.id !== correctLetter.id);\n      let choices = []; // choices.push(correctLetter)\n\n      let copyOfFilteredLetters = [...filteredLetters];\n\n      while (choices.length < 5) {\n        //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array\n        let index = Math.round(Math.random() * copyOfFilteredLetters.length);\n        let wrongAnswer = copyOfFilteredLetters[index];\n\n        if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer);\n          copyOfFilteredLetters.pop(index);\n        } else {\n          //??\n          continue; //break\n          //yield\n          //continue\n          // (leave empty)\n        }\n      } // adds correctLetter at a random index in the choices array\n\n\n      choices.splice(Math.round(Math.random() * copyOfFilteredLetters.length), 0, correctLetter);\n      this.setState({\n        choices: choices,\n        lettersRemaining: filteredLetters\n      });\n    };\n\n    this.updateSelectedChoice = event => {\n      event.preventDefault();\n      let letterObj = alphabet_hash.find(letter => {\n        return letter.implementation === event.target.value;\n      });\n      this.setState({\n        selectedChoice: letterObj\n      });\n      console.log(\"updateSelectedChoice() letterObj: \", letterObj);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(\"we are in handleSubmit\");\n\n      if (this.state.currentLetter === this.state.selectedChoice) {\n        this.setState({\n          numCorrect: this.state.numCorrect + 1\n        });\n      }\n\n      this.setState({\n        numOfAsked: this.state.numOfAsked + 1,\n        currentLetter: {}\n      });\n      this.generateChocies(this.state.currentLetter);\n    };\n\n    this.state = {\n      lettersRemaining: alphabet_hash,\n      currentLetter: {},\n      choices: [],\n      selectedChoice: null,\n      numOfAsked: 0,\n      numCorrect: 0\n    };\n  }\n\n  componentDidMount() {\n    // an array of choices (length = 6) (including the correct one is generated)\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random() * this.state.lettersRemaining.length)];\n    this.setState({\n      currentLetter: correctLetter\n    }); // state for choices is updated on line below\n\n    this.generateChocies(correctLetter);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(ScoreTracker, {\n      numCorrect: this.state.numCorrect,\n      numOfAsked: this.state.numOfAsked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"What sound does this letter make?\"), React.createElement(QuestionLetter, {\n      generateQuestionLetter: this.generateQuestionLetter,\n      currentLetter: this.state.currentLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(ChoiceContainer, {\n      updateSelectedChoice: this.updateSelectedChoice,\n      handleSubmit: this.handleSubmit,\n      choices: this.state.choices,\n      lettersRemaining: this.state.lettersRemaining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameContainer;","map":{"version":3,"sources":["/Users/flatironschool/Development/alphabet-match-game/alphabet-match-game-frontend/src/GameContainer.js"],"names":["React","alphabet_hash","QuestionLetter","ScoreTracker","ChoiceContainer","GameContainer","Component","constructor","generateChocies","correctLetter","state","currentLetter","nextLetter","lettersRemaining","Math","round","random","length","setState","filteredLetters","filter","letter","id","choices","copyOfFilteredLetters","index","wrongAnswer","includes","push","pop","splice","updateSelectedChoice","event","preventDefault","letterObj","find","implementation","target","value","selectedChoice","console","log","handleSubmit","numCorrect","numOfAsked","componentDidMount","render","generateQuestionLetter"],"mappings":"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","sourcesContent":["import React from 'react'\nimport alphabet_hash from './alphabet_hash'\nimport QuestionLetter from './QuestionLetter'\nimport ScoreTracker from './ScoreTracker'\nimport ChoiceContainer from './ChoiceContainer'\n\nclass GameContainer extends React.Component {\n  constructor(){\n    super()\n      this.state = {\n        lettersRemaining: alphabet_hash,\n        currentLetter: {},\n        choices: [],\n        selectedChoice: null,\n        numOfAsked: 0,\n        numCorrect: 0,\n      }\n  }\n\n  componentDidMount(){\n    // an array of choices (length = 6) (including the correct one is generated)\n    let correctLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n    this.setState({currentLetter: correctLetter})\n    // state for choices is updated on line below\n    this.generateChocies(correctLetter)\n  }\n\n  generateChocies = (correctLetter) => {\n    if (this.state.currentLetter) {\n      let nextLetter = this.state.lettersRemaining[Math.round(Math.random()*this.state.lettersRemaining.length)]\n      this.setState({currentLetter: nextLetter})\n      this.setState({currentLetter: nextLetter})\n    }\n    \n    let filteredLetters = this.state.lettersRemaining.filter(letter =>\n      letter.id !== correctLetter.id)\n\n      let choices = []\n      // choices.push(correctLetter)\n\n      let copyOfFilteredLetters = [...filteredLetters]\n\n      while (choices.length < 5) {\n        //generates a random index every loop, adds it to the choices array, checks to make sure the letter doesnt already exist in our copyOfFilteredLetters array then removes it from that array\n        let index = Math.round(Math.random()*copyOfFilteredLetters.length)\n        let wrongAnswer = copyOfFilteredLetters[index]\n        if (!choices.includes(wrongAnswer)) {\n          choices.push(wrongAnswer)\n          copyOfFilteredLetters.pop(index)\n        } else {\n          //??\n          continue\n          //break\n          //yield\n          //continue\n          // (leave empty)\n        }\n      }\n\n\n      // adds correctLetter at a random index in the choices array\n      choices.splice(Math.round(Math.random()*copyOfFilteredLetters.length), 0, correctLetter)\n      this.setState({\n        choices: choices,\n        lettersRemaining: filteredLetters\n      })\n  }\n\n  updateSelectedChoice = (event) => {\n    event.preventDefault()\n    let letterObj = alphabet_hash.find(letter => {\n      return letter.implementation === event.target.value\n    })\n    this.setState({selectedChoice: letterObj})\n    console.log(\"updateSelectedChoice() letterObj: \",letterObj)\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"we are in handleSubmit\")\n\n    if (this.state.currentLetter === this.state.selectedChoice) {\n      this.setState({numCorrect: this.state.numCorrect + 1})\n    }\n    this.setState({\n      numOfAsked: this.state.numOfAsked + 1,\n      currentLetter: {},\n  })\n  this.generateChocies(this.state.currentLetter)\n\n\n\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <ScoreTracker\n          numCorrect={this.state.numCorrect}\n          numOfAsked={this.state.numOfAsked}\n        />\n        <h3>What sound does this letter make?</h3>\n        <QuestionLetter\n          generateQuestionLetter={this.generateQuestionLetter}\n          currentLetter={this.state.currentLetter}\n        />\n        <ChoiceContainer\n          updateSelectedChoice={this.updateSelectedChoice}\n          handleSubmit={this.handleSubmit}\n          choices={this.state.choices}\n          lettersRemaining={this.state.lettersRemaining}\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default GameContainer\n"]},"metadata":{},"sourceType":"module"}